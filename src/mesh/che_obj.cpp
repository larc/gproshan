#include "mesh/che_obj.h"

#include <cstring>
#include <cstdio>
#include <cassert>
#include <fstream>


using namespace std;


// geometry processing and shape analysis framework
namespace gproshan {


che_obj::che_obj(const string & file)
{
	init(file);
}

void che_obj::read_file(const string & file)
{
	FILE * fp = fopen(file.c_str(), "r");
	assert(fp);

	float x, y, z, r, g, b;
	index_t P[32], n;

	vector<vertex> vertices;
	vector<vertex> vertices_color;
	vector<index_t> faces;

	char line[256], key[4];
	char * line_ptr;
	index_t offset;

	while(fgets(line, sizeof(line), fp))
	{
		key[0] = 0;
		line_ptr = line;

		sscanf(line_ptr, "%s%n", key, &offset);
		line_ptr += offset;

		if(key[0] == 'v' && !key[1])	// v x y z
		{
			n = sscanf(line_ptr, "%f %f %f %f %f %f", &x, &y, &z, &r, &g, &b);
			vertices.push_back({x, y, z});
			vertices_color.push_back(n == 6 ? vertex{r, g, b} : vcolor);
		}

		if(key[0] == 'f')				// f v1/vt1/vn1 v2/vt2/vn2 v3/vt3/vn3 ...
		{
			n = 0;
			while(sscanf(line_ptr, "%d%*s%n", P + n, &offset) > 0)
			{
				line_ptr += offset;
				P[n] += P[n] > vertices.size() ? vertices.size() : -1;
				++n;
			}

			for(const index_t & v: trig_convex_polygon(P, n))
				faces.push_back(v);
		}
	}

	fclose(fp);


	alloc(vertices.size(), faces.size() / che::mtrig);
	memcpy(GT, vertices.data(), vertices.size() * sizeof(vertex));
	memcpy(VC, vertices_color.data(), vertices_color.size() * sizeof(vertex));
	memcpy(VT, faces.data(), faces.size() * sizeof(index_t));
}

void che_obj::write_file(const che * mesh, const string & file)
{
	ofstream os(file + ".obj");

	os << "####\n#\n";
	os << "# OBJ generated by gproshan 2019" << endl;
	os << "# vertices: " << mesh->n_vertices << endl;
	os << "# faces: " << mesh->n_faces << endl;
	os << "#\n####\n";

	for(size_t v = 0; v < mesh->n_vertices; ++v)
		os << "v " << mesh->gt(v) << endl;

	for(index_t he = 0; he < mesh->n_half_edges; )
	{
		os << "f";
		for(index_t i = 0; i < che::mtrig; ++i)
			os << " " << mesh->vt(he++) + 1;
		os << endl;
	}

	os.close();
}


} // namespace gproshan

